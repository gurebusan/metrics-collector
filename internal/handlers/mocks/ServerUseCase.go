// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/zetcan333/metrics-collector/internal/models"
)

// ServerUseCase is an autogenerated mock type for the ServerUseCase type
type ServerUseCase struct {
	mock.Mock
}

// GetAllMetrics provides a mock function with no fields
func (_m *ServerUseCase) GetAllMetrics() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMetrics")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetric provides a mock function with given fields: metricType, metricName
func (_m *ServerUseCase) GetMetric(metricType string, metricName string) (string, error) {
	ret := _m.Called(metricType, metricName)

	if len(ret) == 0 {
		panic("no return value specified for GetMetric")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(metricType, metricName)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(metricType, metricName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(metricType, metricName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetViaModel provides a mock function with given fields: metric
func (_m *ServerUseCase) GetViaModel(metric models.Metrics) (models.Metrics, error) {
	ret := _m.Called(metric)

	if len(ret) == 0 {
		panic("no return value specified for GetViaModel")
	}

	var r0 models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Metrics) (models.Metrics, error)); ok {
		return rf(metric)
	}
	if rf, ok := ret.Get(0).(func(models.Metrics) models.Metrics); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Get(0).(models.Metrics)
	}

	if rf, ok := ret.Get(1).(func(models.Metrics) error); ok {
		r1 = rf(metric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetric provides a mock function with given fields: metricType, metricName, metricValue
func (_m *ServerUseCase) UpdateMetric(metricType string, metricName string, metricValue string) error {
	ret := _m.Called(metricType, metricName, metricValue)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetric")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(metricType, metricName, metricValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateViaModel provides a mock function with given fields: metric
func (_m *ServerUseCase) UpdateViaModel(metric models.Metrics) (models.Metrics, error) {
	ret := _m.Called(metric)

	if len(ret) == 0 {
		panic("no return value specified for UpdateViaModel")
	}

	var r0 models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Metrics) (models.Metrics, error)); ok {
		return rf(metric)
	}
	if rf, ok := ret.Get(0).(func(models.Metrics) models.Metrics); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Get(0).(models.Metrics)
	}

	if rf, ok := ret.Get(1).(func(models.Metrics) error); ok {
		r1 = rf(metric)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServerUseCase creates a new instance of ServerUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerUseCase {
	mock := &ServerUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
